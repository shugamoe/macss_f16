beta_2 = -1
theta = - beta_1 / (2 * beta_2)
bootstrap = function(){
x = runif(100, 0, 2)
epsilon = rnorm(n, 0, .2)
g_x = beta_0 + beta_1 * x + beta_2 * (x ^ 2)
y = g_x + epsilon
model = lm(y ~ 1 + x + I((x^2)))
b1_hat = model$coefficients[2]
b2_hat = model$coefficients[3]
theta_hat = -b1_hat / (2 * b2_hat)
return(theta_hat)
}
experiment = function(value = theta){
bootstraps = replicate(B, bootstrap())
conf.95 = quantile(bootstraps, c(.025, .975))
print(conf.95)
return(theta > conf.95[1] && theta < conf.95[2])
}
coverage = function(){
tf_vector = replicate(num_exps, experiment())
coverage = sum(tf_vector) / length(tf_vector)
}
coverage()
a = c(1,2,3)
b = c(4,5,6)
c = c(7,8,9)
mat = matrix(c(a,b,c))
mat
mat = matrix(a,b,c)
mat = matrix(list(a,b,c))
mat
mat[1,]
cov(mat)
mat = data.frame(a,b,c)
mat
mat = data.frame(a,b,c)
cov(mat)
cov(mat)
a = c(1,2,3)
b = c(0,0,0)
c = c(0,0,0)
mat = data.frame(a,b,c)
cov(mat)
theta = matrix(c(101, 100, 10, 100, 101, 10, 10, 10, 1), nrow = 3, byrow = TRUE)
bootstrap =  function() {
z = rnorm(n)
epsilon = rnorm(n)
delta = rnorm(n)
x = 10 * z + epsilon
y = 10 * z + delta
mat = data.frame(x, y, z)
cov.mat = cov(mat)
inv.cov.mat = solve(cov.mat)
}
theta
cov.mat = matrix(c(101, 100, 10, 100, 101, 10, 10, 10, 1), nrow = 3, byrow = TRUE)
inv.cm = solve(cov.mat)
theta = - inv.cm[1, 2] / sqrt(inv.cm[1, 1] * inv.cm[2, 2])
bootstrap =  function() {
z = rnorm(n)
epsilon = rnorm(n)
delta = rnorm(n)
x = 10 * z + epsilon
y = 10 * z + delta
mat = data.frame(x, y, z)
cov.mat.hat = cov(mat)
inv.cm.hat = solve(cov.mat.hat)
}
theta
theta
theta
theta
0 + theta
inv.cm
cov.mat
inv.cm
inv.cm[2,1] = 0
cov.mat = matrix(c(101, 100, 10, 100, 101, 10, 10, 10, 1), nrow = 3, byrow = TRUE)
inv.cm = solve(cov.mat)
inv.cm[2, 1] = 0
inv.cm[1, 2] = 0
theta = - inv.cm[1, 2] / sqrt(inv.cm[1, 1] * inv.cm[2, 2])
bootstrap =  function() {
z = rnorm(n)
epsilon = rnorm(n)
delta = rnorm(n)
x = 10 * z + epsilon
y = 10 * z + delta
mat = data.frame(x, y, z)
cov.mat.hat = cov(mat)
inv.cm.hat = solve(cov.mat.hat)
}
theta
cov.mat = matrix(c(101, 100, 10, 100, 101, 10, 10, 10, 1), nrow = 3, byrow = TRUE)
inv.cm = solve(cov.mat)
# These 2 are close to 0 anyway
inv.cm[2, 1] = 0
inv.cm[1, 2] = 0
# The above makes theta = 0.
theta = - inv.cm[1, 2] / sqrt(inv.cm[1, 1] * inv.cm[2, 2])
bootstrap =  function() {
z = rnorm(n)
epsilon = rnorm(n)
delta = rnorm(n)
x = 10 * z + epsilon
y = 10 * z + delta
mat = data.frame(x, y, z)
cov.mat.hat = cov(mat)
inv.cm.hat = solve(cov.mat.hat)
theta.hat = - inv.cm.hat[1, 2] / sqrt(inv.cm.hat[1, 1] * inv.com[2, 2])
return(theta.hat)
}
experiment = function(value = theta){
bootstraps = replicate(B, bootstrap())
conf.95 = quantile(bootstraps, c(.025, .975))
print(conf.95)
return(theta > conf.95[1] && theta < conf.95[2])
}
experiment()
cov.mat = matrix(c(101, 100, 10, 100, 101, 10, 10, 10, 1), nrow = 3, byrow = TRUE)
inv.cm = solve(cov.mat)
# These 2 are close to 0 anyway
inv.cm[2, 1] = 0
inv.cm[1, 2] = 0
# The above makes theta = 0.
theta = - inv.cm[1, 2] / sqrt(inv.cm[1, 1] * inv.cm[2, 2])
bootstrap =  function() {
z = rnorm(n)
epsilon = rnorm(n)
delta = rnorm(n)
x = 10 * z + epsilon
y = 10 * z + delta
mat = data.frame(x, y, z)
cov.mat.hat = cov(mat)
inv.cm.hat = solve(cov.mat.hat)
theta.hat = - inv.cm.hat[1, 2] / sqrt(inv.cm.hat[1, 1] * inv.cm.hat[2, 2])
return(theta.hat)
}
experiment = function(value = theta){
bootstraps = replicate(B, bootstrap())
conf.95 = quantile(bootstraps, c(.025, .975))
print(conf.95)
return(theta > conf.95[1] && theta < conf.95[2])
}
experiment()
experiment()
experiment()
experiment()
experiment()
experiment()
experiment()
experiment()
experiment()
experiment()
experiment()
experiment()
experiment()
cov.mat = matrix(c(101, 100, 10, 100, 101, 10, 10, 10, 1), nrow = 3, byrow = TRUE)
inv.cm = solve(cov.mat)
# These 2 are close to 0 anyway
inv.cm[2, 1] = 0
inv.cm[1, 2] = 0
# The above makes theta = 0.
theta = - inv.cm[1, 2] / sqrt(inv.cm[1, 1] * inv.cm[2, 2])
bootstrap =  function() {
z = rnorm(n)
epsilon = rnorm(n)
delta = rnorm(n)
x = 10 * z + epsilon
y = 10 * z + delta
mat = data.frame(x, y, z)
cov.mat.hat = cov(mat)
inv.cm.hat = solve(cov.mat.hat)
theta.hat = - inv.cm.hat[1, 2] / sqrt(inv.cm.hat[1, 1] * inv.cm.hat[2, 2])
return(theta.hat)
}
experiment = function(value = theta){
bootstraps = replicate(B, bootstrap())
conf.95 = quantile(bootstraps, c(.025, .975))
print(conf.95)
return(theta > conf.95[1] && theta < conf.95[2])
}
coverage = function(){
tf_vector = replicate(num_exps, experiment())
coverage = sum(tf_vector) / length(tf_vector)
return(coverage)
}
coverage()
identity(c(1,2,3))
diag(10)
eigen(diag(10))
x = rnorm(sd=sqrt(diag10))
x = rnorm(n,sd=sqrt(diag10))
x = rnorm(n,sd=sqrt(diag(10)))
x
sqrt(diag(10))
x = rnorm(n,sd=sqrt(diag(10)))
x
dim(x)
length(x)
cov(x)
cov(data.frame(x))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
rnorm(1, sd=diag(10))
diag(10)
cov(x)
x
x.mat = mat(x)
x.mat = matrix(x)
x.mat
cov(x.mat)
cov(data.frame(x))
solve(cov(x.mat))
solve(cov(x.mat))
solve(cov(x.mat))
solve(cov(x.mat))
solve(cov(x.mat))
solve(cov(x.mat))
solve(diag(10))
eigen(diag(10))
eigen(cov(x.mat))
cov(x.mat)
cov(x.mat)
cov(x.mat)
rnorm(n, sd = c(1,2,3,4,5,6,7,8,9,10))
cov(x, x)
cov(x, x)
cov(x)
cov(x, x)
cov(x, x)
cov(x, x)
eigen(cov(x,x))
x = rnorm(n,sd=sqrt(diag(10)))
x = rnorm(n,sd=sqrt(diag(10)))
x = rnorm(n,sd=sqrt(diag(10)))
x = rnorm(n,sd=sqrt(diag(10)))
x = rnorm(n,sd=sqrt(diag(10)))
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
x = rnorm(n,mean = rep(0, 10),sd=sqrt(diag(10)))
x
rep(0, 10)
diag(10)
typeof(diag(10))
matrix(diag(10))
matrix(diag(10), byrow = T)
sd.mat = matrix(diag(10), nrow = 10)
sd.mat
x = rnorm(n, sd=sd.mat)
x
cov(x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
cov(x,x)
typeof(sd.mat)
diag(10)[1,2]
diag(10)[1,1]
diag(10)[2,2]
beta_0 = -1
beta_1 = 2
beta_2 = -1
theta.actual.a = - beta_1 / (2 * beta_2)
init_sample = function(){
x = runif(n, 0, 2)
epsilon = rnorm(n, 0, .2)
g_x = beta_0 + beta_1 * x + beta_2 * (x ^ 2)
y = g_x + epsilon
model = lm(y ~ 1 + x + I((x ^ 2)))
b1.hat = model$coefficients[2]
b2.hat = model$coefficients[3]
theta.hat.n = -b1.hat / (2 * b2.hat)
return(list(theta.hat.n = theta.hat.n, sample.init = list(x = x, y = y)))
}
bootstrap = function(sample.init){
# Resampling procedure
bootstrap_indices = sample(seq(1, n), replace = TRUE)
bs_x = sample.init$x[bootstrap_indices]
bs_y = sample.init$y[bootstrap_indices]
model = lm(bs_y ~ 1 + bs_x + I((bs_x ^ 2)))
b1.hat = model$coefficients[2]
b2.hat = model$coefficients[3]
theta.hat.b = -b1.hat / (2 * b2.hat)
return(theta.hat.b)
}
experiment = function(theta.hat.n, sample.init, theta.actual){
bootstraps = replicate(B, bootstrap(sample.init))
H_r = sqrt(n) * (bootstraps - mean(bootstraps))
tiles = quantile(H_r, c(.025, .975))
conf.95 = c(theta.hat.n - (tiles[2] / sqrt(n)), theta.hat.n + (tiles[1] / sqrt(n)))
# conf.95 = quantile(bootstraps, c(.025, .975))
se.hat = sd(bootstraps)
# conf.95 = c(theta.hat.n - tiles[1] * se.hat, theta.hat.n + tiles[2] * se.hat)
print(conf.95)
return(theta.actual > conf.95[1] && theta.actual < conf.95[2])
}
coverage = function(theta.hat.n, sample.init, theta.actual){
tf_vector = replicate(num_exps, experiment(theta.hat.n=theta.hat.n, sample.init=sample.init, theta.actual=theta.actual))
coverage = sum(tf_vector) / length(tf_vector)
return(coverage)
}
a.run = function() {
init = init_sample()
print(theta.actual.a)
print(init$theta.hat.n)
coverage(init$theta.hat.n, init$sample.init, theta.actual.a)
}
a.run()
beta_0 = -1
beta_1 = 2
beta_2 = -1
theta.actual.a = - beta_1 / (2 * beta_2)
init_sample = function(){
x = runif(n, 0, 2)
epsilon = rnorm(n, 0, .2)
g_x = beta_0 + beta_1 * x + beta_2 * (x ^ 2)
y = g_x + epsilon
model = lm(y ~ 1 + x + I((x ^ 2)))
b1.hat = model$coefficients[2]
b2.hat = model$coefficients[3]
theta.hat.n = -b1.hat / (2 * b2.hat)
return(list(theta.hat.n = theta.hat.n, sample.init = list(x = x, y = y)))
}
bootstrap = function(sample.init){
# Resampling procedure
bootstrap_indices = sample(seq(1, n), replace = TRUE)
bs_x = sample.init$x[bootstrap_indices]
bs_y = sample.init$y[bootstrap_indices]
model = lm(bs_y ~ 1 + bs_x + I((bs_x ^ 2)))
b1.hat = model$coefficients[2]
b2.hat = model$coefficients[3]
theta.hat.b = -b1.hat / (2 * b2.hat)
return(theta.hat.b)
}
experiment = function(theta.hat.n, sample.init, theta.actual){
bootstraps = replicate(B, bootstrap(sample.init))
H_r = sqrt(B) * (bootstraps - mean(bootstraps))
tiles = quantile(H_r, c(.025, .975))
conf.95 = c(theta.hat.n - (tiles[2] / sqrt(B)), theta.hat.n + (tiles[1] / sqrt(B)))
# conf.95 = quantile(bootstraps, c(.025, .975))
se.hat = sd(bootstraps)
# conf.95 = c(theta.hat.n - tiles[1] * se.hat, theta.hat.n + tiles[2] * se.hat)
print(conf.95)
return(theta.actual > conf.95[1] && theta.actual < conf.95[2])
}
coverage = function(theta.hat.n, sample.init, theta.actual){
tf_vector = replicate(num_exps, experiment(theta.hat.n=theta.hat.n, sample.init=sample.init, theta.actual=theta.actual))
coverage = sum(tf_vector) / length(tf_vector)
return(coverage)
}
a.run = function() {
init = init_sample()
print(theta.actual.a)
print(init$theta.hat.n)
coverage(init$theta.hat.n, init$sample.init, theta.actual.a)
}
a.run()
beta_0 = -1
beta_1 = 2
beta_2 = -1
theta.actual.a = - beta_1 / (2 * beta_2)
init_sample = function(){
x = runif(n, 0, 2)
epsilon = rnorm(n, 0, .2)
g_x = beta_0 + beta_1 * x + beta_2 * (x ^ 2)
y = g_x + epsilon
model = lm(y ~ 1 + x + I((x ^ 2)))
b1.hat = model$coefficients[2]
b2.hat = model$coefficients[3]
theta.hat.n = -b1.hat / (2 * b2.hat)
return(list(theta.hat.n = theta.hat.n, sample.init = list(x = x, y = y)))
}
bootstrap = function(sample.init){
# Resampling procedure
bootstrap_indices = sample(seq(1, n), replace = TRUE)
bs_x = sample.init$x[bootstrap_indices]
bs_y = sample.init$y[bootstrap_indices]
model = lm(bs_y ~ 1 + bs_x + I((bs_x ^ 2)))
b1.hat = model$coefficients[2]
b2.hat = model$coefficients[3]
theta.hat.b = -b1.hat / (2 * b2.hat)
return(theta.hat.b)
}
experiment = function(theta.hat.n, sample.init, theta.actual){
bootstraps = replicate(B, bootstrap(sample.init))
H_r = sqrt(B) * (bootstraps - mean(bootstraps))
tiles = quantile(H_r, c(.025, .975))
conf.95 = c(theta.hat.n - (tiles[2] / sqrt(B)), theta.hat.n - (tiles[1] / sqrt(B)))
# conf.95 = quantile(bootstraps, c(.025, .975))
se.hat = sd(bootstraps)
# conf.95 = c(theta.hat.n - tiles[1] * se.hat, theta.hat.n + tiles[2] * se.hat)
print(conf.95)
return(theta.actual > conf.95[1] && theta.actual < conf.95[2])
}
coverage = function(theta.hat.n, sample.init, theta.actual){
tf_vector = replicate(num_exps, experiment(theta.hat.n=theta.hat.n, sample.init=sample.init, theta.actual=theta.actual))
coverage = sum(tf_vector) / length(tf_vector)
return(coverage)
}
a.run = function() {
init = init_sample()
print(theta.actual.a)
print(init$theta.hat.n)
coverage(init$theta.hat.n, init$sample.init, theta.actual.a)
}
a.run()
beta_0 = -1
beta_1 = 2
beta_2 = -1
theta.actual.a = - beta_1 / (2 * beta_2)
init_sample = function(){
x = runif(n, 0, 2)
epsilon = rnorm(n, 0, .2)
g_x = beta_0 + beta_1 * x + beta_2 * (x ^ 2)
y = g_x + epsilon
model = lm(y ~ 1 + x + I((x ^ 2)))
b1.hat = model$coefficients[2]
b2.hat = model$coefficients[3]
theta.hat.n = -b1.hat / (2 * b2.hat)
return(list(theta.hat.n = theta.hat.n, sample.init = list(x = x, y = y)))
}
bootstrap = function(sample.init){
# Resampling procedure
bootstrap_indices = sample(seq(1, n), replace = TRUE)
bs_x = sample.init$x[bootstrap_indices]
bs_y = sample.init$y[bootstrap_indices]
model = lm(bs_y ~ 1 + bs_x + I((bs_x ^ 2)))
b1.hat = model$coefficients[2]
b2.hat = model$coefficients[3]
theta.hat.b = -b1.hat / (2 * b2.hat)
return(theta.hat.b)
}
experiment = function(theta.hat.n, sample.init, theta.actual){
bootstraps = replicate(B, bootstrap(sample.init))
H_r = sqrt(n) * (bootstraps - mean(bootstraps))
tiles = quantile(H_r, c(.025, .975))
conf.95 = c(theta.hat.n - (tiles[2] / sqrt(n)), theta.hat.n - (tiles[1] / sqrt(n)))
# conf.95 = quantile(bootstraps, c(.025, .975))
se.hat = sd(bootstraps)
# conf.95 = c(theta.hat.n - tiles[1] * se.hat, theta.hat.n + tiles[2] * se.hat)
print(conf.95)
return(theta.actual > conf.95[1] && theta.actual < conf.95[2])
}
coverage = function(theta.hat.n, sample.init, theta.actual){
tf_vector = replicate(num_exps, experiment(theta.hat.n=theta.hat.n, sample.init=sample.init, theta.actual=theta.actual))
coverage = sum(tf_vector) / length(tf_vector)
return(coverage)
}
a.run = function() {
init = init_sample()
print(theta.actual.a)
print(init$theta.hat.n)
coverage(init$theta.hat.n, init$sample.init, theta.actual.a)
}
a.run()
setwd("~/macss_f16/spatial/proj/submission")
