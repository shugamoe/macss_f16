sim(TRUE)
sim(TRUE)
sim(TRUE)
pi
t = seq(1, 1000)
t
doppler_fun = function(x) {
rv = sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05))
}
model = function(obs = 1000, sig = 0.1,) {
rv = c()
xs = doppler(seq(1, obs)) + sig * rnorm(obs)
}
doppler_fun = function(x) {
rv = sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05))
}
model = function(obs = 1000, sig = 0.1,) {
rv = c()
xs = doppler(seq(1, obs)) + sig * rnorm(obs)
}
xs = doppler(seq(1, obs)) + sig * rnorm(obs)
doppler= function(x) {
rv = sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05))
}
model = function(obs = 1000, sig = 0.1) {
rv = c()
xs = doppler(seq(1, obs)) + sig * rnorm(obs)
}
model()
doppler(c(1,2))
t = 5
typeof(t)
t = c(1,2,3)
typeof(t)
t
kern_doppler = function(x) {
rv = sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_doppler(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_doppler(num))
}
return(rv)
}
}
model = function(obs = 1000, sig = 0.1) {
rv = c()
xs = doppler(seq(1, obs)) + sig * rnorm(obs)
}
model()
warnings()
doppler(5)
x = 5
rv = sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05))
x
sqrt(x*(1-x))
d = c(1,2,3)
do.call(kern_doppler, as.list(d))
kern_doppler(5)
kern_doppler(.5)
kern_doppler(.5)
kern_doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_doppler(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_doppler(num))
}
return(rv)
}
}
model = function(obs = 1000, sig = 0.1) {
rv = c()
xs = doppler(seq(1, obs)) + sig * rnorm(obs)
}
d
typeof(d)
x = d[d/2 == 1]
x
x = d[d/1 > 1]
x
1:1000
(1:1000)[$1]
(1:1000)[1]
(1:1000)[2]
obs = 1000
xs = (1:obs)[(1:obs)/obs]
xs
xs
(1:obs)[(1:obs)/obs]
obs
(1:obs)/obs
kern_doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_doppler(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_doppler(num))
}
return(rv)
}
}
model = function(num_obs = 1000, sig = 0.1) {
rv = c()
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(obs)
}
model
model()
kern_doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_doppler(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_doppler(num))
}
return(rv)
}
}
model = function(num_obs = 1000, sig = 0.1) {
rv = c()
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(obs)
return(obs)
}
model()
kern_doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_doppler(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_doppler(num))
}
return(rv)
}
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(obs)
llr = density(obs)
return(llr)
}
model()
h =model()
h
names(h)
names(h)$x
h$x
h$y
obs
kern_doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_doppler(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_doppler(num))
}
return(rv)
}
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(obs)
llr = density(obs)
return(llr, obs)
}
model()
xs
doppler((1:1000)/1000 + .1*rnorm(1000))
kern_doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_doppler(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_doppler(num))
}
return(rv)
}
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(obs)
llr = density(obs)
return(llr)
}
model()
kern_doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_doppler(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_doppler(num))
}
return(rv)
}
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(num_obs)
llr = density(obs)
return(llr)
}
model()
c = as.array(c(1,2,3))
c
typeoef(c)
typeof(c)
c = as.list(c(1,2,3))
typeof(c)
kern_doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_doppler(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_doppler(num))
}
return(rv)
}
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(num_obs)
llr = density(obs)
return(as.list(llr, obs))
}
model()
h = model()
h
names(h)
names(density)
abs(-5)
abs(5)
abs(-5)
kern_base = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_base(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_base(num))
}
return(rv)
}
}
tricube = function(x) {
return(70 / 81 * (1 - ind(x) ^ 3) ^ 3 * ind(x))
}
ind = function(x) {
if(abs(x) <= 1) {
return(1)
} else {
return(0)
}
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(num_obs)
llr = density(obs)
return(as.list(llr, obs))
}
ind(5)
ind(.5)
tricube(5)
tricube(0)
tricube(.5)
tricube(.7)
kern_base = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
doppler = function(x) {
if(length(x) == 1) {
return(kern_base(x))
} else {
rv = c()
for(num in x) {
rv = append(rv, kern_base(num))
}
return(rv)
}
}
tricube = function(x) {
return(70 / 81 * (1 - abs(x) ^ 3) ^ 3 * ind(x))
}
ind = function(x) {
if(abs(x) <= 1) {
return(1)
} else {
return(0)
}
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(num_obs)
llr = density(obs)
return(as.list(llr, obs))
}
tricube(5)
tricube(.5)
tricube(.3)
f = as.matrix(c(1,2,3), nrow = 3, ncol = 1)
f
f[1]
f[,1]
f[,1]
f[,1]
f[,1]
f[,1]
f[,1]
f[,1]
t
t
5(t) + 3
5(t)
5*t + 3
5*t^2 + 3
t^2
t
kern_base(5)
kern_base(.5)
kern_base(c(.5, .4))
doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
# doppler = function(x) {
#   if(length(x) == 1) {
#     return(kern_base(x))
#   } else {
#     rv = c()
#     for(num in x) {
#       rv = append(rv, kern_base(num))
#     }
#   return(rv)
#   }
# }
tricube = function(x) {
return(70 / 81 * (1 - abs(x) ^ 3) ^ 3 * ind(x))
}
ind = function(x) {
if(abs(x) <= 1) {
return(1)
} else {
return(0)
}
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
obs = doppler(xs) + sig * rnorm(num_obs)
llr = density(obs)
return(as.list(llr, obs))
}
model()
c(2,2) * c(2,2)
c(2,2) * c(2,3)
sum(c(0,0,5))
t
t[1]
t[2]
t[3]
x[x[i] - x for(i in x)]
as.list(c(1,2))
x = c(1,2,3)
y = c(4,5,6)
as.list(x,y)
as.list(c(x,y))
t = c(c(1), c(5))
t
x
y
cbind(x,y)
cbind(x,y)
cbind(c(1,2,3), c(4,5,6))
cbind(x,y)
h = cbind(x,y)
h[,1]
x''
x
x[x != x[2]]
i = 2
x[x != x[i]]
test = function() {
return(PENIS)
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
ys = doppler(xs) + sig * rnorm(num_obs)
PENIS = 5
test()
}
test = function() {
return(PENIS)
}
model = function(num_obs = 1000, sig = 0.1) {
xs = (1:num_obs) / num_obs
ys = doppler(xs) + sig * rnorm(num_obs)
PENIS = 5
return(test())
}
model()
x
y
y = append(y, c(5,7,8))
5+=5
5 += 5
x
x+=5
x += 5
x
length(x
)
setwd("~/macss_f16/nonpar/hw1")
doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
cvs = function(h, x, y) {
llr = locfit(y ~ x, alpha = c(0, h), deg = 1)
# From 'smoothdemo.r'
Lii = predict(llr, where="data", what="infl")
return(mean(((y - fitted(llr)) / (1 - Lii)) ^ 2))
}
model = function(num_obs = 1000, sigma = 0.1) {
# Generate data
x = (1:num_obs) / num_obs
y = doppler(x) + sigma * rnorm(num_obs)
# Determine optimal h (using the function cvs as the "formula derived in part (a)")
h = seq(.01, .8, .01)
cv_scores = unlist(lapply(h, cvs, x = x, y = y))
hstar = h[cv_scores == min(cv_scores)]
# Local linear regression fitted using locfit lib
out = locfit(y ~ x, alpha = c(0, hstar), deg = 1)
plot(x, y, pch=16, cex=0.9, col=rgb(0.7, 0.7, 0.9))
lines(x, doppler(x), 'l', col='red', lwd=3)
lines(x, fitted(out), 'l', col='blue', lwd=3)
# From 'smoothdemo.r'
normell = predict(out, where='data', what='vari')
n = length(x)
lines(x, fitted(out) + sqrt(n) * 2 * sigma * normell, 'l', col='gray', lwd=1)
lines(x, fitted(out) - sqrt(n) * 2 * sigma * normell, 'l', col='gray', lwd=1)
}
# Run model
library(locfit)
model()
doppler = function(x) {
return(sqrt(x * (1 - x))*sin(2.1 * pi/(x + .05)))
}
cvs = function(h, x, y) {
llr = locfit(y ~ x, alpha = c(0, h), deg = 1)
# From 'smoothdemo.r'
Lii = predict(llr, where="data", what="infl")
return(mean(((y - fitted(llr)) / (1 - Lii)) ^ 2))
}
model = function(num_obs = 1000, sigma = 0.1) {
# Generate data
x = (1:num_obs) / num_obs
y = doppler(x) + sigma * rnorm(num_obs)
# Determine optimal h (using the function cvs as the "formula derived in part (a)")
h = seq(.01, .8, .01)
cv_scores = unlist(lapply(h, cvs, x = x, y = y))
hstar = h[cv_scores == min(cv_scores)]
print(hstar)
# Local linear regression fitted using locfit lib
out = locfit(y ~ x, alpha = c(0, hstar), deg = 1)
plot(x, y, pch=16, cex=0.9, col=rgb(0.7, 0.7, 0.9))
lines(x, doppler(x), 'l', col='red', lwd=3)
lines(x, fitted(out), 'l', col='blue', lwd=3)
# From 'smoothdemo.r'
normell = predict(out, where='data', what='vari')
n = length(x)
lines(x, fitted(out) + sqrt(n) * 2 * sigma * normell, 'l', col='gray', lwd=1)
lines(x, fitted(out) - sqrt(n) * 2 * sigma * normell, 'l', col='gray', lwd=1)
}
# Run model
library(locfit)
model()
